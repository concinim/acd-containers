{"version":3,"file":"component---src-pages-installing-using-image-mirroring-md-539bd1c2b1bd51fed182.js","mappings":"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","sources":["webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack://acd-containers/./src/pages/installing/using-image-mirroring.md"],"sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport * as styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageHeader-module--bx--text-truncate--end--b8JtW\";\nexport var bxTextTruncateFront = \"PageHeader-module--bx--text-truncate--front--WwZFh\";\nexport var darkMode = \"PageHeader-module--dark-mode--WCeH8\";\nexport var pageHeader = \"PageHeader-module--page-header--NqfPe\";\nexport var text = \"PageHeader-module--text--Er2EO\";\nexport var withTabs = \"PageHeader-module--with-tabs--vbQ-W\";","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"EditLink-module--bx--text-truncate--end--uI0cF\";\nexport var bxTextTruncateFront = \"EditLink-module--bx--text-truncate--front--HxjcS\";\nexport var link = \"EditLink-module--link--IDrl1\";\nexport var row = \"EditLink-module--row--BEmSX\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageTabs-module--bx--text-truncate--end--OC59x\";\nexport var bxTextTruncateFront = \"PageTabs-module--bx--text-truncate--front--5I6-L\";\nexport var link = \"PageTabs-module--link--Kz-7R\";\nexport var list = \"PageTabs-module--list--xLqxG\";\nexport var listItem = \"PageTabs-module--list-item--024o6\";\nexport var selectedItem = \"PageTabs-module--selected-item--aBB0K\";\nexport var tabsContainer = \"PageTabs-module--tabs-container--Cdfzw\";","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport * as styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"last-modified-date-module--bx--text-truncate--end--QgCc7\";\nexport var bxTextTruncateFront = \"last-modified-date-module--bx--text-truncate--front--kel8a\";\nexport var row = \"last-modified-date-module--row--XJoYQ\";\nexport var text = \"last-modified-date-module--text--ogPQF\";","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/acd-containers/acd-containers/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Setting up container registry repository mirroring enables you to do the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Configure your OpenShift Container Platform cluster to redirect requests to pull images from a repository on a source image registry and have it resolved by a repository on a mirrored image registry.`}</li>\n      <li parentName=\"ul\">{`Identify multiple mirrored repositories for each target repository, to make sure that if one mirror is down, another can be used.`}</li>\n    </ul>\n    <p>{`See Red Hat OpenShift’s `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.openshift.com/container-platform/4.8/openshift_images/image-configuration.html#images-configuration-registry-mirror_image-configuration\"\n      }}>{`configuring image registry repository mirroring`}</a>{` for additional details.`}</p>\n    <p>{`Images for IBM Watson Annotator for Clinical Data are available from the IBM Entitled Registry through December, 2022. Images for Merative Annotator for Clinical Data are available from the ACD registry. ACD consumers need to migrate from IBM ACD to Merative ACD by the end of December, 2022. To help ensure all ACD images are available during this migration period, we have mirrored recent `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/merative/acd-containers/blob/master/CHANGELOG.md#releases\"\n      }}>{`versions`}</a>{` of the IBM ACD images from the IBM Entitled Registry to the ACD registry. Credentials for the ACD registry can be used to pull either Merative or IBM ACD images, once mirroring is configured for the IBM ACD images.`}</p>\n    <p>{`In order to use mirrored images, follow these steps to configure container registry and repository image source and mirror locations on your cluster.`}</p>\n    <h3>{`Configure mirroring to an existing mirror location`}</h3>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Log into the cluster`}</p>\n        <p parentName=\"li\">{`Log into the Red Hat OpenShift Container Platform cluster as a cluster administrator using the `}<inlineCode parentName=\"p\">{`oc login`}</inlineCode>{` command.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create the ACD registry credentials for the Azure ACD registry, if not previously created. See `}<a parentName=\"p\" {...{\n            \"href\": \"/acd-containers/installing/installing/#ibm-entitled-registry-pull-secret\"\n          }}>{`creating a global pull secret`}</a>{` for details.`}</p>\n        <p parentName=\"li\"><strong parentName=\"p\">{`NOTE`}</strong>{`: You can only configure global pull secrets for clusters that have an ImageContentSourcePolicy object. You cannot add a pull secret to a project.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create an `}<inlineCode parentName=\"p\">{`ImageContentSourcePolicy`}</inlineCode>{` file (for example, `}<inlineCode parentName=\"p\">{`acd-registry-mirror.yaml`}</inlineCode>{`), replacing the source and mirrors with your own registry and repository pairs and images if you don’t want to use the provided mirrors.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\",\n            \"metastring\": \"acd-registry-mirror.yaml\",\n            \"acd-registry-mirror.yaml\": true\n          }}>{`apiVersion: operator.openshift.io/v1alpha1\nkind: ImageContentSourcePolicy\nmetadata:\n  name: acd-registry-mirror\nspec:\n  repositoryDigestMirrors:\n    - mirrors:\n        - acdcontaineredition.azurecr.io/cp/wh-acd\n      source: cp.icr.io/cp/wh-acd\n    - mirrors:\n        - acdcontaineredition.azurecr.io/cp\n      source: icr.io/cpopen\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create the new `}<inlineCode parentName=\"p\">{`ImageContentSourcePolicy`}</inlineCode>{` object.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc create -f acd-registry-mirrror.yaml\n`}</code></pre>\n        <p parentName=\"li\">{`After the `}<inlineCode parentName=\"p\">{`ImageContentSourcePolicy`}</inlineCode>{` object is created, the new settings are deployed to each node and the cluster starts using the mirrored repository for requests to the source repository.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Check that the mirrored configuration settings are applied by doing the following on one of the nodes.`}</p>\n        <p parentName=\"li\">{`a. List your nodes:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc get node\n`}</code></pre>\n        <p parentName=\"li\">{`Example output`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`NAME            STATUS                        ROLES           AGE\n10.240.128.19   Ready                         master,worker   56d\n10.240.128.20   NotReady,SchedulingDisabled   master,worker   56d\n10.240.128.21   Ready                         master,worker   56d\n10.240.128.5    Ready                         master,worker   25h\n10.240.128.6    Ready                         master,worker   25h\n10.240.128.7    Ready                         master,worker   25h\n`}</code></pre>\n        <p parentName=\"li\">{`You can see that scheduling on each worker node is disabled as the change is being applied.`}</p>\n        <p parentName=\"li\">{`b. Start the debugging process to access the node:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc debug node/10.240.128.20\n`}</code></pre>\n        <p parentName=\"li\">{`Example output`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Starting pod/1024012821-debug ...\nTo use host binaries, run \\`chroot /host\\`\nPod IP: 10.240.128.21\nIf you don't see a command prompt, try pressing enter.\nsh-4.4#\n`}</code></pre>\n        <p parentName=\"li\">{`c. Access the node’s files:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`sh-4.4# chroot /host\nsh-4.2#\n`}</code></pre>\n        <p parentName=\"li\">{`d. Check the `}<inlineCode parentName=\"p\">{`/etc/containers/registries.conf`}</inlineCode>{` file to make sure the changes were made:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`sh-4.2# cat /etc/containers/registries.conf\n`}</code></pre>\n        <p parentName=\"li\">{`Example output`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`unqualified-search-registries = [\"registry.access.redhat.com\", \"docker.io\"]\n\n[[registry]]\n  prefix = \"\"\n  location = \"cp.icr.io/cp/wh-acd\"\n  mirror-by-digest-only = true\n\n  [[registry.mirror]]\n    location = \"acdcontaineredition.azurecr.io/cp/wh-acd\"\n\n[[registry]]\n  prefix = \"\"\n  location = \"icr.io/cpopen\"\n  mirror-by-digest-only = true\n\n  [[registry.mirror]]\n    location = \"acdcontaineredition.azurecr.io/cp\"\n`}</code></pre>\n        <p parentName=\"li\">{`e. Pull an image digest to the node from the source and check if it is resolved by the mirror. `}<inlineCode parentName=\"p\">{`ImageContentSourcePolicy`}</inlineCode>{` objects support image digests only, not image tags.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`podman pull --log-level=debug cp.icr.io/cp/wh-acd/clinical-data-annotator@sha256:bc077404849f4794a9de0ff2aad3a9af78fe72560b46d623a711d42927e5c955\n`}</code></pre>\n      </li>\n    </ol>\n    <h3>{`Mirror images to another container registry`}</h3>\n    <p>{`There are several ways that you can mirror images from one registry to another. Choose the most appropriate method for your environment. These documents may be useful as references.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Set up a mirrored repository with Red Hat Quay, as described in `}<a parentName=\"li\" {...{\n          \"href\": \"https://access.redhat.com/documentation/en-us/red_hat_quay/3/html/manage_red_hat_quay/repo-mirroring-in-red-hat-quay\"\n        }}>{`Red Hat Quay Repository Mirroring`}</a>{`. Using Red Hat Quay allows you to copy images from one repository to another and also automatically syncs those repositories repeatedly over time.`}</li>\n      <li parentName=\"ul\">{`Use a tool such as skopeo (see example `}<a parentName=\"li\" {...{\n          \"href\": \"https://docs.openshift.com/container-platform/4.8/openshift_images/image-configuration.html#images-configuration-registry-mirror_image-configuration\"\n        }}>{`here`}</a>{`) to copy images manually from the source directory to the mirrored repository.`}</li>\n      <li parentName=\"ul\">{`Set up a mirrored repository to a private container registry, as described `}<a parentName=\"li\" {...{\n          \"href\": \"https://www.ibm.com/docs/en/cloud-paks/cp-data/4.0?topic=tasks-mirroring-images-your-private-container-registry\"\n        }}>{`here`}</a>{` to mirror images from the IBM Entitled Registry.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["title","theme","tabs","className","cx","length","id","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","Link","to","React","date","lastModified","Date","toLocaleDateString","day","year","month","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}