{"version":3,"file":"component---src-pages-installing-setup-namespace-md-ff6a13d36ab9ca988d3a.js","mappings":"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","sources":["webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack://acd-containers/./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack://acd-containers/./src/pages/installing/setup-namespace.md"],"sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport * as styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageHeader-module--bx--text-truncate--end--b8JtW\";\nexport var bxTextTruncateFront = \"PageHeader-module--bx--text-truncate--front--WwZFh\";\nexport var darkMode = \"PageHeader-module--dark-mode--WCeH8\";\nexport var pageHeader = \"PageHeader-module--page-header--NqfPe\";\nexport var text = \"PageHeader-module--text--Er2EO\";\nexport var withTabs = \"PageHeader-module--with-tabs--vbQ-W\";","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"EditLink-module--bx--text-truncate--end--uI0cF\";\nexport var bxTextTruncateFront = \"EditLink-module--bx--text-truncate--front--HxjcS\";\nexport var link = \"EditLink-module--link--IDrl1\";\nexport var row = \"EditLink-module--row--BEmSX\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"PageTabs-module--bx--text-truncate--end--OC59x\";\nexport var bxTextTruncateFront = \"PageTabs-module--bx--text-truncate--front--5I6-L\";\nexport var link = \"PageTabs-module--link--Kz-7R\";\nexport var list = \"PageTabs-module--list--xLqxG\";\nexport var listItem = \"PageTabs-module--list-item--024o6\";\nexport var selectedItem = \"PageTabs-module--selected-item--aBB0K\";\nexport var tabsContainer = \"PageTabs-module--tabs-container--Cdfzw\";","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport * as styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","// extracted by mini-css-extract-plugin\nexport var bxTextTruncateEnd = \"last-modified-date-module--bx--text-truncate--end--QgCc7\";\nexport var bxTextTruncateFront = \"last-modified-date-module--bx--text-truncate--front--kel8a\";\nexport var row = \"last-modified-date-module--row--XJoYQ\";\nexport var text = \"last-modified-date-module--text--ogPQF\";","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/acd-containers/acd-containers/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Each deployment of the ACD operator and its dependent resources need to be scoped to a project for proper isolation.`}</p>\n    <h2>{`Create a project (namespace)`}</h2>\n    <p>{`Create a namespace into which the ACD instance will be installed by creating a `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.openshift.com/container-platform/4.7/applications/projects/working-with-projects.html\"\n      }}>{`project`}</a>{`.`}</p>\n    <p>{`When you create a project, a namespace with the same name is also created.`}</p>\n    <p>{`Ensure you use a namespace that is dedicated to a single instance of ACD.`}</p>\n    <p><strong parentName=\"p\">{`Important`}</strong>{`: Do not use any of the default or system namespaces to install an instance of ACD (some examples of these are: default, kube-system, kube-public, and openshift-operators).`}</p>\n    <h2>{`Setting up ACD service optional dependencies`}</h2>\n    <hr></hr>\n    <h3>{`Setting up S3-based Configuration Storage`}</h3>\n    <hr></hr>\n    <p>{`If the deployment will use S3-based storage, the S3 credentials need to be inserted into the ACD operand namespace as secrets.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`echo '<cos_id>' | tr -d '\\\\n' > username\necho '<cos_secret>' | tr -d '\\\\n' > password\noc create secret generic merative-acd-as \\\\\n    --namespace <namespace> \\\\\n    --from-file=username \\\\\n    --from-file=password\n`}</code></pre>\n    <hr></hr>\n    <h3>{`Setting up File-based Storage Configuration Persistent Volume and Claim Setup`}</h3>\n    <hr></hr>\n    <p>{`If the deployment will use persistent file-based storage, the Persistent Volume (PV) and Persistent Volume Claim (PVC) must be created.`}</p>\n    <p>{`If you are deploying more than one instance of ACD, each deployment is required to have its own PV and PVC within its own project.  `}</p>\n    <p>{`We have tested two methods for providing a shared filesystem for storing ACD persistent data.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#create-ocs\"\n        }}>{`OpenShift Container Storage (OCS)`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#create-nfs\"\n        }}>{`NFS`}</a></li>\n    </ul>\n    <p>{`Create the shared file system using the platform’s tools with encryption enabled. It is recommended to have a minimum of 10 gigabyte of free space within the file system for configuration storage. Access mode must be set to ReadWriteMany (RWX).`}</p>\n    <a name=\"create-ocs\"></a>\n    <h4>{`Creating an OCS (cephfs) shared filesystem`}</h4>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Install OCS from the Operator Catalog.  This will install the cephfs storage class.  You must provide a block storage class for OCS to use.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In the ACD namespace, manually create the ACD persistent volume claim from the example “merative-acd-config-storage-cephfs-pvc.yaml” file below.  The persistent volume will get dynamically created from the `}<inlineCode parentName=\"p\">{`ocs-storagecluster-cephfs`}</inlineCode>{` storage class.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc create -n <your namespace> -f merative-acd-config-storage-cephfs-pvc.yaml\n`}</code></pre>\n        <br />Example:  PVC file \"merative-acd-config-storage-cephfs-pv.yaml\"\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\",\n            \"metastring\": \"merative-acd-config-storage-cephfs-pvc.yaml\",\n            \"merative-acd-config-storage-cephfs-pvc.yaml\": true\n          }}>{`apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: merative-acd-config-storage-cephfs-pvc\n  spec:\n    accessModes:\n    - ReadWriteMany\n    resources:\n      requests:\n        storage: 10Gi\n    storageClassName: ocs-storagecluster-cephfs\n    volumeMode: Filesystem\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Determine the name of the generated persistent volume that is bound to your PVC.  The PV name starts with ‘pvc-’`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc get pvc -n <acd namespace>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Patch the generated persistent volume to change the `}<inlineCode parentName=\"p\">{`persistentVolumeReclaimPolicy`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`Retain`}</inlineCode>{` so the volume does not get deleted if the PVC is deleted.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc patch pv <dynamic-pv-name> -p '{\"spec\":{\"persistentVolumeReclaimPolicy\":\"Retain\"}}'\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Continue to the `}<a parentName=\"p\" {...{\n            \"href\": \"#shared-prep\"\n          }}>{`Shared File System Preparation`}</a>{` step below.`}</p>\n      </li>\n    </ol>\n    <h4>{`OCS Persistent Volume and Claim Removal`}</h4>\n    <p>{`WARNING: Removing an OCS persistent volume will delete any data stored in that PV.`}</p>\n    <p>{`To remove the persistent volume and claim, run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc delete pvc merative-acd-config-storage-cephfs-pvc.yaml -n <your namespace>\noc delete pv <dynamic-pv-name>\n`}</code></pre>\n    <a name=\"create-nfs\"></a>\n    <h4>{`Creating an NFS shared filesystem`}</h4>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create the persistent volume for NFS`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc create -f merative-acd-config-storage-nfs-pv.yaml\n`}</code></pre>\n        <p parentName=\"li\">{`Note: The path to the NFS volume must be unique for each ACD instance.`}</p>\n        <br />Example:  NFS PV file \"merative-acd-config-storage-nfs-pv.yaml\"\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\",\n            \"metastring\": \"merative-acd-config-storage-nfs-pv.yaml\",\n            \"merative-acd-config-storage-nfs-pv.yaml\": true\n          }}>{`apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: merative-acd-config-storage-nfs-pv\nspec:\n  capacity:\n    storage: 10Gi\n  nfs:\n     server: your-nfs-server\n     path: /your/nfs/path\n  accessModes:\n    - ReadWriteMany\n  persistentVolumeReclaimPolicy: Retain\n  volumeMode: Filesystem\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create the persistent volume claim for NFS`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`oc create -f merative-acd-config-storage-nfs-pvc.yaml -n <your namespace>\n`}</code></pre>\n        <br />Example:  NFS PVC file \"merative-acd-config-storage-nfs-pvc.yaml\"\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-yaml\",\n            \"metastring\": \"merative-acd-config-storage-nfs-pvc.yaml\",\n            \"merative-acd-config-storage-nfs-pvc.yaml\": true\n          }}>{`apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: merative-acd-config-storage-nfs-pvc\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 10Gi\n  volumeMode: Filesystem\n  volumeName: merative-acd-config-storage-nfs-pv\n`}</code></pre>\n      </li>\n    </ol>\n    <h4>{`NFS Persistent Volume and Claim Removal`}</h4>\n    <p>{`To remove the persistent volume and claim, run the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`oc delete pvc merative-acd-config-storage-nfs-pvc -n <your namespace>\noc delete pv merative-acd-config-storage-nfs-pv\n`}</code></pre>\n    <a name=\"shared-prep\"></a>\n    <h3>{`Shared File System Preparation`}</h3>\n    <p>{`Once the shared file system is created, the top-level directory should be empty and its GID set to 0 (root) with group `}<inlineCode parentName=\"p\">{`rwx`}</inlineCode>{` permissions.  This is required to allow the ACD services write access when running with a restricted SCC.  If the shared file system requires a GID other than zero, you must also set the `}<inlineCode parentName=\"p\">{`Supplemental Group ID`}</inlineCode>{` parameter in the `}<inlineCode parentName=\"p\">{`File Storage -> PVC`}</inlineCode>{` section during the ACD instance creation.  `}</p>\n    <p>{`Example commands to set the shared file system directory permissions:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`chgrp 0 <top level mount directory>\nchmod g+w <top level mount directory>\n`}</code></pre>\n    <p>{`If you don’t have direct access to the top-level directory of the file share, one technique to set the directory permissions is to start a temporary pod that runs as root with the PVC mounted.  Exec into the pod to run the `}<inlineCode parentName=\"p\">{`chgrp`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`chmod`}</inlineCode>{` commands on the mounted share directory.`}</p>\n    <p>{`When creating the ACD instance, the `}<inlineCode parentName=\"p\">{`Existing PVC Name`}</inlineCode>{` parameter should match the name specified in the PVC that was created in these steps.  The `}<inlineCode parentName=\"p\">{`PVC Storage Size`}</inlineCode>{` must also be set to match the size of the shared file system.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["title","theme","tabs","className","cx","length","id","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","Link","to","React","date","lastModified","Date","toLocaleDateString","day","year","month","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","name","isMDXComponent"],"sourceRoot":""}