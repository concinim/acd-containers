{"componentChunkName":"component---src-pages-security-security-context-constraints-md","path":"/security/security-context-constraints/","result":{"pageContext":{"frontmatter":{"title":"SecurityContextConstraints Requirements","excerpt":"","categories":"security","slug":"security-context-constraints","toc":true},"relativePagePath":"/security/security-context-constraints.md","titleType":"page","MdxNode":{"id":"e1f9eacd-cd54-523e-a603-1f1aadb55d92","children":[],"parent":"93046975-0750-57b4-82fb-bc979bba546f","internal":{"content":"---\ntitle: \"SecurityContextConstraints Requirements\"\nexcerpt: \"\"\ncategories: security\nslug: security-context-constraints\ntoc: true\n---\n\n\n## SecurityContextConstraints requirements\n\nSecurity Context Constraints (or SCCs) set limits on what containers in a pod can do on the cluster.  See [Managing security context constraints](https://docs.openshift.com/container-platform/4.7/authentication/managing-security-context-constraints.html) for more details.\n\nBy default, the Annotator for Clinical Data ACD operator uses the `restricted` SecurityContextConstraints resource for its pod security.\nIf desired, a custom SecurityContextConstraints resource can be created and applied instead. Here is an example:\n\n```yaml\napiVersion: security.openshift.io/v1\nkind: SecurityContextConstraints\nmetadata:\n  name: ibm-wh-server-operator-scc\n  annotations:\n    kubernetes.io/description: ibm-wh-server-operator-scc denies access to all\n      host features and requires pods to be run with a UID, and SELinux context\n      that are allocated to the namespace, enforces readOnlyRootFilesystem, and\n      drops all capabilities.\nallowHostDirVolumePlugin: false\nallowHostIPC: false\nallowHostNetwork: false\nallowHostPID: false\nallowHostPorts: false\nallowPrivilegeEscalation: false\nallowPrivilegedContainer: false\nallowedCapabilities: []\ndefaultAddCapabilities: []\ngroups: []\nfsGroup:\n  type: MustRunAs\npriority: null\nreadOnlyRootFilesystem: true\nrequiredDropCapabilities:\n  - ALL\nrunAsUser:\n  type: MustRunAsRange\nseLinuxContext:\n  type: MustRunAs\nsupplementalGroups:\n  type: RunAsAny\nusers: []\nvolumes:\n  - configMap\n  - downwardAPI\n  - emptyDir\n  - persistentVolumeClaim\n  - projected\n  - secret\n```\n\nTo cause the ACD operator to use the custom SecurityContextConstraints resource:\n\n1. Find the `acd-sa` ServiceAccount resource in the same namespace as the operator.\n\n2. Add the following to the rules in the ClusterRole resource that the ServiceAccount resource is bound to, and apply.\n\n```yaml\n- apiGroups:\n    - security.openshift.io\n  resourceNames:\n    - ibm-wh-server-operator-scc\n  resources:\n    - securitycontextconstraints\n  verbs:\n    - use\n```\n\n* The ACD operator also creates custom ClusterRole, ClusterRoleBinding, Role, RoleBinding, SecurityContextConstraints, and ServiceAccount resources to ensure separation of duties.\n","type":"Mdx","contentDigest":"f4196250cfdd07d9f664289e1bf324da","owner":"gatsby-plugin-mdx","counter":252},"frontmatter":{"title":"SecurityContextConstraints Requirements","excerpt":"","categories":"security","slug":"security-context-constraints","toc":true},"excerpt":"","exports":{},"rawBody":"---\ntitle: \"SecurityContextConstraints Requirements\"\nexcerpt: \"\"\ncategories: security\nslug: security-context-constraints\ntoc: true\n---\n\n\n## SecurityContextConstraints requirements\n\nSecurity Context Constraints (or SCCs) set limits on what containers in a pod can do on the cluster.  See [Managing security context constraints](https://docs.openshift.com/container-platform/4.7/authentication/managing-security-context-constraints.html) for more details.\n\nBy default, the Annotator for Clinical Data ACD operator uses the `restricted` SecurityContextConstraints resource for its pod security.\nIf desired, a custom SecurityContextConstraints resource can be created and applied instead. Here is an example:\n\n```yaml\napiVersion: security.openshift.io/v1\nkind: SecurityContextConstraints\nmetadata:\n  name: ibm-wh-server-operator-scc\n  annotations:\n    kubernetes.io/description: ibm-wh-server-operator-scc denies access to all\n      host features and requires pods to be run with a UID, and SELinux context\n      that are allocated to the namespace, enforces readOnlyRootFilesystem, and\n      drops all capabilities.\nallowHostDirVolumePlugin: false\nallowHostIPC: false\nallowHostNetwork: false\nallowHostPID: false\nallowHostPorts: false\nallowPrivilegeEscalation: false\nallowPrivilegedContainer: false\nallowedCapabilities: []\ndefaultAddCapabilities: []\ngroups: []\nfsGroup:\n  type: MustRunAs\npriority: null\nreadOnlyRootFilesystem: true\nrequiredDropCapabilities:\n  - ALL\nrunAsUser:\n  type: MustRunAsRange\nseLinuxContext:\n  type: MustRunAs\nsupplementalGroups:\n  type: RunAsAny\nusers: []\nvolumes:\n  - configMap\n  - downwardAPI\n  - emptyDir\n  - persistentVolumeClaim\n  - projected\n  - secret\n```\n\nTo cause the ACD operator to use the custom SecurityContextConstraints resource:\n\n1. Find the `acd-sa` ServiceAccount resource in the same namespace as the operator.\n\n2. Add the following to the rules in the ClusterRole resource that the ServiceAccount resource is bound to, and apply.\n\n```yaml\n- apiGroups:\n    - security.openshift.io\n  resourceNames:\n    - ibm-wh-server-operator-scc\n  resources:\n    - securitycontextconstraints\n  verbs:\n    - use\n```\n\n* The ACD operator also creates custom ClusterRole, ClusterRoleBinding, Role, RoleBinding, SecurityContextConstraints, and ServiceAccount resources to ensure separation of duties.\n","fileAbsolutePath":"/home/runner/work/acd-containers/acd-containers/src/pages/security/security-context-constraints.md"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2456312558","2610115429","2746626797","3037994772","768070550"]}